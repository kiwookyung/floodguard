services:
  traefik:
    image: "traefik:v3.5"
    container_name: "traefik"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    command:
      - "--api.insecure=false"
      - "--api.dashboard=false"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--providers.file.directory=/etc/traefik/dynamic"

      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure"
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.websecure.http.tls=true"
      - "--entryPoints.websecure.http.tls.certresolver=le"

      # Let's Encrypt configuration
      - "--certificatesresolvers.le.acme.email=" # replace with your actual email
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"

      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

      # Add the following volumes
      - "./traefik/certs:/certs:ro"
      - "./traefik/dynamic:/etc/traefik/dynamic:ro"
      - "./traefik/letsencrypt:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.docker.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"

  backend:
    container_name: backend
    build:
      context: ./S13P11C101/backend
    restart: unless-stopped
    ports:
      - "18000:18000"
    env_file:
      - ./S13P11C101/backend/.env
    depends_on:
      - db
      - redis
    volumes:
      - ./S13P11C101/backend:/app
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`i13c101.p.ssafy.io`) && (PathPrefix(`/api`) || PathPrefix(`/ws`))"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=18000"
      - "traefik.http.routers.backend.tls.certresolver=le"

  db:
    image: postgres:15
    container_name: postgres_db
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql+asyncpg://user:password@databaseUrl:5432/database
      POSTGRES_USER: 
      POSTGRES_PASSWORD: 
      POSTGRES_DB: 
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - proxy

  redis:
    image: "redis:latest"
    container_name: redis
    restart: unless-stopped
    networks:
      - proxy
    depends_on:
      - db

  frontend:
    build: ./S13P11C101/frontend
    container_name: frontend
    # ports:
    #   - "80:80"
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`i13c101.p.ssafy.io`)"
      - "traefik.http.routers.frontend.entryPoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.tls.certresolver=le"
      - "traefik.http.routers.frontend.tls=true"

networks:
  proxy:
    name: proxy

volumes:
  postgres_data: